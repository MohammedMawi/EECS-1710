package eecs2030.lab2;

import java.util.Arrays;
import java.util.Random;
import java.util.ArrayList;


/**
 * Lab for reviewing array and String manipulation in Java and 
 * an intro to utility classes and static features 
 * 
 * @author EECS2030
 *
 */
public class Encryption {
	
	
	
	private final static String ALPHABET = "ABCDEFGHIJKLMNOPQRSTUVWXYZ ";
	
	public static void main(String[] args) {
		
		String encryptedText = encrypt("IN CRYPTOGRAPHY, A SUBSTITUTION CIPHER IS A METHOD OF ENCODING BY WHICH UNITS OF PLAINTEXT ARE REPLACED WITH CIPHERTEXT, ACCORDING TO A FIXED SYSTEM; THE \"UNITS\" MAY BE SINGLE LETTERS (THE MOST COMMON), PAIRS OF LETTERS, TRIPLETS OF LETTERS, MIXTURES OF THE ABOVE, AND SO FORTH. THE RECEIVER DECIPHERS THE TEXT BY PERFORMING THE INVERSE SUBSTITUTION", "ABCDEFGH");
		System.out.println(encryptedText);
		
		System.out.println(decrypt(encryptedText, "ABCDEFGH"));
		
	}

	public static String encrypt(String textToEncrypt, String key) {
		
		//getting hash code of key variable
		int hash = key.hashCode();
		
		//using hash value of key variable to initialize Random object
		Random random = new Random(hash);
		Random random2 = new Random(hash);
		
		//turn ALPHABET into an array of chars
	    char[] alphabetArray = ALPHABET.toCharArray(); 	
		
		//for loop to swap the characters in the ALPHABET variable 100 times
		for(int i = 0; i < 100; i++) {
			
			//storing random numbers from 0 - 26
			int index1 = random.nextInt(0, 27);
			int index2 = random.nextInt(0, 27);
						
			//swapping characters
			char temp = alphabetArray[index1];
			alphabetArray[index1] = alphabetArray[index2];
			alphabetArray[index2] = temp;
			
		}
		
		//turning shuffled array back to a string
		//GCWHAKSXJMDLFUB ITVYRPZENQO
		String newAlphabet = new String(alphabetArray);		
		
		int [] pattern = {0, 1, 2, 3, 4, 5, 6, 7};
		
		//shuffling pattern array 100 times
		for(int i = 0; i < 100; i++) {
			
			//choosing two random indices
			int index1 = random2.nextInt(8);
			int index2 = random2.nextInt(8);
			
			//swapping the two indices
			int temp = pattern[index1];
			pattern[index1] = pattern[index2];
			pattern[index2] = temp;
			
		}		
				
		//creating new empty string to add scrambled letters into
		StringBuilder scramble64 = new StringBuilder("");
		
		for(int i = 0; i < textToEncrypt.length(); i++) {
			
			//get letter at index i from 64 character string
			char letter = textToEncrypt.charAt(i);
			
			//use letter to get index # from ALPHABET variable
			int index = ALPHABET.indexOf(letter);
			
			//if character is found in the alphabet it will return index #
			if (index != -1) {
				//use index # to get letter from new scrambled alphabet
				char letter2 = newAlphabet.charAt(index);
		        
				//add that letter to scramble64 string
				scramble64.append(letter2);
		    } 
			//if character is not found in the alphabet it will return -1, add letter "O"
			else {
		        scramble64.append("O");
		    }
			
		}
//		System.out.println(scramble64);
		
		//if statement to add "O" if string length is not a multiple of 64
        if (scramble64.length()%64 != 0){
            int paddingLength = 64 - (scramble64.length() % 64);

            for (int i = 0; i < paddingLength; i++) {
                scramble64.append("O");
            }
        }
		
		//creating 2D array, 8x8, 8 rows 8 columns
		char [][] transpo = new char [8][8];
		
		//creating an empty string to put the columned elements in
		String shuffle = "";
		
        //outer loop to run multiple of 64 times. Ex. if string length is 256, it will run 4 times
        for (int i = 0; i < scramble64.length()/64; i++) {
        	        	
			//gets chunks of 64 letters from the string each iteration using substring(startIndex, endIndex)
			/*Example: first iteration i = 0, 
			  startIndex: 0 * 64 = 0, endIndex: (0 * 64) + 64 = 64
			  substring(0,64)
			  gets characters from 0th index (inclusive) to 64th index (exclusive) */
            String cut = scramble64.substring(i * 64, (i * 64) +64);

            //for loop to iterate through each row of 2D array
            for (int j = 0; j < transpo.length; j++) {
            	
            	//using substring to get chunks of 8 characters each time
            	//apply same concept as above but with chunks of 8
                String cut2 = cut.substring(j * 8, (j * 8) + 8);

                //inner loop to iterate through each column of jth row
                for (int s = 0; s < transpo[j].length; s++) {
                	//adding character from cut substring into 2D array
                    transpo[j][s] = cut2.charAt(s);
                }
            }
                        
            //taking columns of in this order [3, 2, 7, 4, 1, 0, 5, 6]
            //appending those columns into a string;
            for (int k = 0; k < transpo.length; k++) {
                for (int l = 0; l < transpo[k].length; l++) {
                    shuffle += transpo[l][pattern[k]];
                }
            }
        }	
        System.out.println();

		return shuffle;
	}
	
	

	public static String decrypt(String textToDecrypt, String key) {
		
		char [][] transpo = new char [8][8];
		char [][] transpo2 = new char [8][8];
		
		int [] pattern = {5, 4, 1, 0, 3, 6, 7, 2};
		String shuffle = "";
		
		for(int i = 0; i < textToDecrypt.length()/64; i++) {
			String cut = textToDecrypt.substring(i * 64, (i* 64) + 64);
			
			for(int j = 0; j < transpo.length; j++) {
				
				String cut2 = cut.substring(j * 8, (j* 8) + 8);
				for(int k = 0; k < transpo[j].length; k++) {
					transpo[j][k] = cut2.charAt(k);
				}
			}
			
			for(int j = 0; j < transpo.length; j++) {
                for(int k = 0; k < transpo[j].length; k++) {
                    transpo2[j][k] = transpo[pattern[k]][j];
                }
                
            }
			
			for(int j = 0; j < transpo.length; j++) {
				for(int k = 0; k < transpo.length; k++) {
					shuffle += transpo2[j][k];
				}
			}
		}
		
		//getting hash code of key variable
		int hash = key.hashCode();
		
		//using hash value of key variable to initialize Random object
		Random random = new Random(hash);
		
		//turn ALPHABET into an array of chars
	    char[] alphabetArray = ALPHABET.toCharArray(); 	
		
		//for loop to swap the characters in the ALPHABET variable 100 times
		for(int i = 0; i < 100; i++) {
			
			//storing random numbers from 0 - 26
			int index1 = random.nextInt(0, 27);
			int index2 = random.nextInt(0, 27);
						
			//swapping characters
			char temp = alphabetArray[index1];
			alphabetArray[index1] = alphabetArray[index2];
			alphabetArray[index2] = temp;
		}
		
		//GCWHAKSXJMDLFUB ITVYRPZENQO
		String newAlphabet = new String(alphabetArray);
		String decrypted = "";
		
		for(int i = 0; i < shuffle.length(); i++) {
			
			char letter = shuffle.charAt(i);
			
			int index = newAlphabet.indexOf(letter);
			
			char letter2 = ALPHABET.charAt(index);
			
			decrypted += letter2;
			
		}
				
		return decrypted;
	}

}

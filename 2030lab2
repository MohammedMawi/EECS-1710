package eecs2030.lab2;

import java.util.Arrays;
import java.util.Random;
import java.util.ArrayList;


/**
 * Lab for reviewing array and String manipulation in Java and 
 * an intro to utility classes and static features 
 * 
 * @author EECS2030
 *
 */
public class Encryption {
	
	
	
	private final static String ALPHABET = "ABCDEFGHIJKLMNOPQRSTUVWXYZ ";
	
	public static void main(String[] args) {
		
		System.out.println(encrypt("IN CRYPTOGRAPHY, A SUBSTITUTION CIPHER IS A METHOD OF ENCODING B", "ABCDEFGH"));
		
	}

	public static String encrypt(String textToEncrypt, String key) {
		
		//getting hash code of key variable
		int hash = key.hashCode();
		
		//using hash value of key variable to initialize Random object
		Random random = new Random(hash);
		Random random2 = new Random(hash);
		
		//turn ALPHABET into an array of chars
	    char[] alphabetArray = ALPHABET.toCharArray(); 	
		
		//for loop to swap the characters in the ALPHABET variable 100 times
		for(int i = 0; i < 100; i++) {
			
			//storing random numbers from 0 - 26
			int index1 = random.nextInt(0, 27);
			int index2 = random.nextInt(0, 27);
						
			//swapping characters
			char temp = alphabetArray[index1];
			alphabetArray[index1] = alphabetArray[index2];
			alphabetArray[index2] = temp;
			
		}
		
		//turning shuffled array back to a string
		//GCWHAKSXJMDLFUB ITVYRPZENQO
		String newAlphabet = new String(alphabetArray);		
		
		int [] pattern = {0, 1, 2, 3, 4, 5, 6, 7};
		
		//shuffling pattern array 100 times
		for(int i = 0; i < 100; i++) {
			
			//choosing two random indices
			int index1 = random2.nextInt(8);
			int index2 = random2.nextInt(8);
			
			//swapping the two indices
			int temp = pattern[index1];
			pattern[index1] = pattern[index2];
			pattern[index2] = temp;
			
		}
		
				
		//creating new empty string to add scrambled letters into
		StringBuilder scramble64 = new StringBuilder("");
		
		for(int i = 0; i < textToEncrypt.length(); i++) {
			
			//get letter at index i from 64 character string
			char letter = textToEncrypt.charAt(i);
			
			//use letter to get index # from ALPHABET variable
			int index = ALPHABET.indexOf(letter);
			
			//if character is found in the alphabet it will return index #
			if (index != -1) {
				//use index # to get letter from new scrambled alphabet
				char letter2 = newAlphabet.charAt(index);
		        
				//add that letter to scramble64 string
				scramble64.append(letter2);
		    } 
			//if character is not found in the alphabet it will return -1, add letter "O"
			else {
		        scramble64.append("O");
		    }
			
		}
				
		//creating 2D array, 8x8, 8 rows 8 columns
		char [][] transpo = new char [8][8];
		
		//for loop that adds shuffled letters into 2D array
		//outer loop iterates between rows
		for(int i = 0; i < transpo.length; i++) {
			
			//gets 8 letters from string each iteration using substring(startIndex, endIndex)
			/*Example: first iteration i = 0, 
			  startIndex: 0 * 8 = 0, endIndex: (0 * 8) + 8 = 8
			  substring(0,8)
			  gets characters from 0th index (inclusive) to 8th index (exclusive) */
			String cut = scramble64.substring(i * 8, (i * 8) + 8);
			
			//adding characters to jth column in i-th row
			for(int j = 0; j < transpo[i].length; j++) {
				transpo[i][j] = cut.charAt(j);
			}
			
			System.out.println(Arrays.toString(transpo[i]));
			
		}
		
		//new string to add letter from columns of 2D array corresponding to the pattern array
		String shuffle = "";
				
		//loop to iterate through columns to be added to string
		for (int i = 0; i < transpo.length; i++) {

			//adding column of letters to the string based on the index number in the pattern array
			for (int j = 0; j < transpo[i].length; j++) {
                shuffle += transpo[j][pattern[i]];
            }		
        }
				
		return shuffle;
	}

	public static String decrypt(String textToDecrypt, String key) {
		return textToDecrypt;
	}

}
